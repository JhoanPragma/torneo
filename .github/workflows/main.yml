name: CI/CD AWS Serverless

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ‚úÖ Crear placeholder ZIP para Terraform
      - name: Create Lambda Placeholder
        run: |
          echo "placeholder for lambda" > placeholder.txt
          zip lambda_placeholder.zip placeholder.txt
          rm placeholder.txt

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        env:
          TF_LOG: INFO
        run: terraform apply -auto-approve -var="aws_region=${{ env.AWS_REGION }}"

      # ‚úÖ Guarda el ZIP generado como artefacto para el siguiente job
      - name: Upload Lambda Placeholder
        uses: actions/upload-artifact@v3
        with:
          name: lambda_placeholder
          path: lambda_placeholder.zip

  lambda_deploy:
    needs: terraform_deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: crear-torneo-lambda
            path: lambdas/torneos
          - name: ventas-lambda
            path: lambdas/ventas
          - name: qr-generator-lambda
            path: lambdas/qr-generator
          - name: notificaciones-lambda
            path: lambdas/notificaciones

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Placeholder
        uses: actions/download-artifact@v3
        with:
          name: lambda_placeholder

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # ‚úÖ Verifica si la carpeta existe antes de empaquetar
      - name: Package Lambda (${{ matrix.service.name }})
        run: |
          if [ -d "${{ matrix.service.path }}" ]; then
            echo "üì¶ Empaquetando c√≥digo desde ${{ matrix.service.path }}"
            cd ${{ matrix.service.path }}
            npm ci --omit=dev || echo "Sin dependencias npm"
            zip -r ../../${{ matrix.service.name }}.zip .
            cd ../../
          else
            echo "‚ö†Ô∏è Carpeta ${{ matrix.service.path }} no existe. Usando placeholder gen√©rico."
            cp lambda_placeholder.zip ${{ matrix.service.name }}.zip
          fi

      - name: Deploy to AWS Lambda (${{ matrix.service.name }})
        run: |
          echo "üöÄ Desplegando ${{ matrix.service.name }}..."
          aws lambda update-function-code \
            --function-name ${{ matrix.service.name }} \
            --zip-file fileb://${{ matrix.service.name }}.zip
